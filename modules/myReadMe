issues: 
1- for some reason .env file is not read and the username and password get passed as blank in bitcoin-client.js (lines 3 and 4)
   so for now I have hard coded them. has to be fixed.
   Did that: There is a good wirteup in node_modules/dotenv with examples and all. In short, among other
   ways of doing this(node_modules/dotenv/readme) I placed a "require('dotenv').config();" statement on the
   top of module "bitcoin-client.js". However the dotenv has to be installed: "npm install dotenv --save" which when done
   froma term in "~/NetBeansProjects/HD-Scanner-Plus$" will place it into the node_modules dir. Now this is how it
   should work but: for some weird reason, when I did that the npm installer added 'dotenv' module but 
   removed 'many, like 80 or so' modules at the same time!! Frotunately I had the entrire 'node_modules' dir
   in the backup, HD-Scanner-Combined, which it the dev environment for this proj. So copied it back over and 
   copied the single 'dotenv' modules manually into it. So basically for the 'process.env.xxxx' to be availabel
   one has to to create and '.env' file, in the root dir of the proj and then do "require('dotenv').config();" in
   a module or at a commnand line run script.js time (which is recommended, readme in dotenv dir in node_modules)

2- In scanners.js, line 58, I hard code the 'scanToBlockHeight' to go from 'scanFromBlockHeight' (which is set in wallets.js) to 
   this hard coded blockhieght   instead of scanning all the way to the current blockhieght. We can only to this if we have an 
   idea about the 'time frame' which we then have to correspond it to an stimated blockhieth.
   This could be fixed, by putting the 'scanToBlockHeight' also in the wallets.js and red from there.
-----------------------------------------------------

3+ Things to look at: 1- what addresses get gen'ed.. look at them by stoping the run (breakpoint) right after they are gen'ed.
   This would tell me where the master key xprv starts, ie, what m/0'/... it corresponds to, this would tell me what kinda wallets  
   is being assumed.
   Answers: in case of electrum, the xpub that we supplied to wallets.js is m/0' and the address are gen'ed from m/0'/0 (which has 
   a different xpub) and then 'it's' first child, ie, we'll see m/0'/0/0 as the first address.
   look at: (from my_python_utils.py)
   ----------
   xprv = bitcoin.bip32_master_key(seed)
   xprvReceive = bitcoin.bip32_ckd(bitcoin.bip32_ckd(xprv, 2**31),0) #m/0'/0
   prvChange = bitcoin.bip32_ckd(bitcoin.bip32_ckd(xprv, 2**31),1) #m/0'/1
   ----------
   so in the code snipit above the xpub we supply to wallet.js (which we got from the wallet (electru's in this case)
   corresponds to: bitcoin.bip32_ckd(xprv, 2**31) or m/0', and then derive its first child to be:
   bitcoin.bip32_ckd(m/0',0) which is the xprRecive,(of course we are talking xpriv here but xpub is drived the same way
   by first doing xprivToxpub()). So in a nutshell m/0'=purpose/type/acct and the '0' is the receive (of the receive
   /change) and children come next.

   This is consitant with the electrum wallets
   and iancoleman and this tool. So, this tool gen's 90000 addresses (setable in wallets.js).
   The addresses are in 'const allAddresses = new Map()' declaered in scanners.js

4- stop somewhere just short of quitting the whole process, which happens after the 'Generating report' take place. PUt some way of
   saving it 'periodicallly' like every 5 min or so.. this way happen when the process craps out (for any reason) we would not loose all the 
   work done up to that point, and we can resume from that point on.
   DID THIS.

5- Look into connecting to 'blockchain.info' instead of our bitcoin node, this way we could switch to 'testnet' we if want (because 
   currently we don't have testnet synced to local, it is actually much bigger that mainnet and it would take ages to downlaod nor is it
   neccessary).\
   This was done... and turns out a) blockchain.info has some 'api' callable from (wss//ws.blockchian.info) for 
   mainnet and they are based on subscription to a channel, or put it differently, open a stream to their blockchain
   and good for monirtoring things like 'latest blcok'... But they don't have the same thing for testnet.
   I did manage to find and use their 'blockchain data api' (https://www.blockchain.com/api/blockchain_api) and make 
   'curl' calls from within javascript. This made thier testnet availabel. But at the end find out that makeing these
   calls are very slow..each block which typically has thousands of tx's would take about 25-30 seconds to receive! 
   this was clealy not suitable for what we are doing. Using our one bitcoin core takes a couple of days to scan the 
   whole blockchian, where the blocks are received by rpc calls almost instantly. So for sanning one must use local 
   bitcoin-core. I therefore abandoned the effort.


6- when the addresses get gen'ed, do the change addresses get included? Would have to look 
   at the generation algo.
   Did this: Put a wirte_to_file() in the scan function of scanner.js and get a snapshot of allAddresses array
   gen'ed, whole 90K of them. This way I can look and see if an address in question is part of the wallet first
   before scanning to see what is in it ( I this this for breeze.. wallet of khosravan and the address that he 
   claims he received some 22 BTC '1JAe6MttznM9rg1E7idyaw9fJ9JNsK3vTc' in, was not among 90K addresses gen'ed, ie,
   that address did not belong in this wallet breeze.. he gave me!). So it is futile to run the scan for 'breeze...'
   wallet.
   I also checked the derivation path and noticed that it just generates only the 'external' ie, receive addresses
   or m/0'/0 and not m/0'/1 or 'internal or change address'. So the whole 90K was receive address. 
   What I did was, in 'address-generators.js', I hard coded a '1' instead of the '0', to generate the 'change address'
   This is temp fix just the get list of addresses file to sift thru to see if the address in question was in this list.
   And it was NOT!!
   Now all of this was about 'p2pkh' only.. I need to check the other p2sh, p2wpkh, or p2wpk-p2sh (wrapped witness)
   aka, address encodeing
   Also, other levels, ie, m/0'/0/0 for example.
   ---------------------
   I may have skipped some updates above, will chck later.. but for now we are adding the following support
7- Ran into problme when I gave an 'electrum pharse' as words to our wallet.js.. well, it hit the fan.
   electrum does not support bip39, in short the way I understand it is that to eliminate the guess work for 
   different software wallets as to what derivation path is being used, which are many in the wild, electrum
   prepends a perfix which corresponds to the address encodding ('01' for p2pkh, '101 for p2wpkh(I think
   PREFIXES = { segwit: '100', standard: '01','2fa': '101','2fa-segwit': '102'} )and..so on
   ) eg, generate an entropy, using a nounce and keep on hashig till he first (3 bytes I think) corresponds to that
   code, like '01' for p2pkh, then take that and from a given word list selects the words (just like bip39, I think)
   This way software looks at the seed phrase and readily figurs out the first bytes implying the key-type or addEnc or
   whateve else is calld, and has a set derivation path for it (ie, m/ for p2pkh which is also called 'standard' or legacy)
   The reverse of the same scheme is used to use pbkdf2 to go from phrase to seed.
   So, to do this for our HD-Wallet_Scnanner, ie, to accept none bip39 base pharses, I first figured it out 
   in a file called xprv.py in 'myPhthon/electrum-stuff/electrum-xprv-master/xpr.py But then I had to loock 
   for the same thing on the javascript side.. so 'nmp install electrum-mnemonic' and essensially did the same 
   that I did in python, now in javescript.
 --------------------------------------------------------------------------------  
3/21/21  1400/1/1
   Lots more to write, have not written for a while, just heads down plughing thru code
   all this time...

 8-  //'p2pkh'|'p2wpkh-in-p2sh'|'p2wpkh' this in the wallets.js or in our new dynamicWallet.js
    needs to be looked at, in other words, so far we are dealing with p2wpkh and p2pkh only?!

 ---------------------------------------------------------------
 Important: On the release version (on GitHub), in sse_index.js I commented out
 the debug line as follows:
 // const child= fork('modules/scanner',[],{execArgv:['--inspect-brk=40894']});
    const child= fork('modules/scanner',[],{execArgv:[]});
 Ther may have been a cleaner way of doing this, like removing the {execArgv:[]} all
 together, instead of passing it empty.      